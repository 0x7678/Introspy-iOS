
// Utility functions
#import "CallTracer.h"
#import "IntrospySQLiteStorage.h"
#import "PlistObjectConverter.h"
#import "CallStackInspector.h"


static NSString *preferenceFilePath = @"/private/var/mobile/Library/Preferences/com.isecpartners.introspy.plist";


// Hooks for C functions directly use MobileSubstrate
#import "hooks/KeyChainHooks.h"
#import "hooks/CCCryptorHooks.h"
#import "hooks/CCHmacHooks.h"


// Hooks for ObjC methods rely on the Logos pre-processor
// H4ck to split Logos hooking code into separate files: we're including actual code, not headers
IntrospySQLiteStorage *traceStorage;


%group FileSystemHooks
#include "hooks/NSDataHooks.xm"
#include "hooks/NSFileHandleHooks.xm"
#include "hooks/NSFileManagerHooks.xm"
#include "hooks/NSInputStreamHooks.xm"
#include "hooks/NSOutputStreamHooks.xm"
#include "hooks/UIPasteboardHooks.xm"
#include "hooks/NSURLConnection.xm"
#include "hooks/NSURLConnectionDelegate.xm"
%end

%group UserPreferencesHooks
#include "hooks/NSUserDefaultsHooks.xm"
%end

%group UIPasteboardHooks
#include "hooks/UIPasteboardHooks.xm"
%end


%ctor {
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    // Only hook Apps the user has selected in Introspy's settings panel
    NSString *appId = [[NSBundle mainBundle] bundleIdentifier];
    if (appId == nil) {
	[pool drain];
	return;
    }

    NSMutableDictionary* preferences = [[NSMutableDictionary alloc] initWithContentsOfFile:preferenceFilePath];
    NSLog(@"APPNAME = %@", appId);
    id shouldHook = [preferences objectForKey:appId];
    if (shouldHook == nil) {
	[preferences release];
	[pool drain];
	return;
    }

    if ([shouldHook boolValue]) {
	// Initialize DB storage
	// TODO: shouldLog = [preferences shouldLog]
	BOOL shouldLog = YES;
	traceStorage = [[IntrospySQLiteStorage alloc] initWithDefaultDBFilePathAndlogToConsole: shouldLog];
	if (traceStorage != nil) {
	    	// Initialize hooks
	    	// TODO: if Datastorage.is_enabled etc...
	    	%init(UserPreferencesHooks);
		%init(FileSystemHooks);
		%init(UIPasteboardHooks);
	    	[KeyChainHooks enableHooks];
	    	[CCCryptorHooks enableHooks];
	    	[CCHmacHooks enableHooks];
	}
	else {
		NSLog(@"Introspy - DB Initialization error; disabling hooks.");
	}
    }
    [preferences release];

    // Log all custom URL schemes registered
    // TODO: should we refactor this out of the main Tweak?
    NSArray *url_schemes = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleURLTypes"];
    for (id schemeBundle in url_schemes) {
	    NSString *name = [schemeBundle objectForKey:@"CFBundleURLName"];
	    NSNumber *isPrivate = [schemeBundle objectForKey:@"CFBundleURLIsPrivate"];
	    for (id scheme in [schemeBundle objectForKey:@"CFBundleURLSchemes"]) {
		CallTracer *tracer = [[CallTracer alloc] initWithClass:@"CFBundleURLTypes" andMethod:@"CFBundleURLSchemes"];
		[tracer addArgFromPlistObject:name withKey:@"CFBundleURLName"];
		[tracer addArgFromPlistObject:isPrivate withKey:@"CFBundleURLIsPrivate"];
		[tracer addArgFromPlistObject:scheme withKey:@"CFBundleURLScheme"];
		[traceStorage saveTracedCall:tracer];
		[tracer release];
	    }
    }

    [pool drain];
}

/* vim: set filetype=objc : */
